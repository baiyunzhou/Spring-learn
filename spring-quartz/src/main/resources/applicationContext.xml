<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:property-placeholder location="classpath:jdbc.properties,config.properties" />
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="initialSize">
			<value>${jdbc.initialSize}</value>
		</property>
		<property name="minIdle">
			<value>${jdbc.minIdle}</value>
		</property>
		<property name="maxActive">
			<value>${jdbc.maxActive}</value>
		</property>
		<property name="maxWait">
			<value>${jdbc.maxWait}</value>
		</property>
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<property name="filters" value="stat,logback,config" />
		<property name="removeAbandoned" value="false" />
		<property name="removeAbandonedTimeout" value="180" />
		<property name="logAbandoned" value="true" />
		<!-- <property name="connectionProperties" value="config.decrypt=true" 
			/> -->
	</bean>
	<bean name="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource">
		</property>
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="configLocation" value="classpath:quartz.properties" />
		<property name="triggers">
			<list>
				<ref bean="helloWorldCronTriggerFactoryBean" />
			</list>
		</property>
	</bean>
	<!-- 定时关闭过期采购单 -->
	<bean id="helloWorldCronTriggerFactoryBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="helloWorldJobDetailFactoryBean" />
		<property name="cronExpression"
			value="${quartz.config.HelloWorldTrigger.cronExpression}" />
		<property name="misfireInstruction" value="2"></property>
	</bean>

	<bean id="helloWorldJobDetailFactoryBean"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.zby.scheduler.HelloWorldJob">
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="triggerData">
					<value>${quartz.config.HelloWorldTrigger.triggerData}</value>
				</entry>
				<entry key="longData">
					<value>${quartz.config.HelloWorldTrigger.longData}</value>
				</entry>
			</map>
		</property>
		<property name="durability" value="true" />
		<property name="requestsRecovery" value="true" />
	</bean>
</beans>
